{"ast":null,"code":"import * as ActionTypes from \"../ActionTypes\";\nimport { fetchFollowSpaces, fetchHomeFeed, fetchUser, fetchBlogs, fetchReactions, fetchAnswers, fetchAReactions, fetchComments, fetchBReactions, fetchBComments, fetchBlogDemands, postFail } from '../ActionCreators';\nimport { baseUrl } from \"../../shared/baseUrl\"; //--------------------------AUTHENTICATION-----------------------------------/\n\nexport const signIn = userDetails => async (dispatch, getState) => {\n  try {\n    let response = await fetch(baseUrl + \"users/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userDetails)\n    });\n\n    if (response.ok) {\n      response = await response.json();\n      var interests = \"\";\n\n      for (var i = 0; i < response.user.interests.length; i++) {\n        interests += response.user.interests[i].interest;\n        interests += \"*\";\n      }\n\n      localStorage.setItem(\"isSignedIn\", true);\n      localStorage.setItem(\"userId\", response.user._id);\n      localStorage.setItem(\"interests\", interests);\n      localStorage.setItem(\"token\", response.token);\n      dispatch({\n        type: ActionTypes.SIGN_IN,\n        payload: response\n      });\n    } else {\n      response = await response.text();\n      throw new Error(response);\n    }\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.AUTH_FAILED,\n      payload: {\n        error: err\n      }\n    });\n  }\n};\nexport const signUp = userDetails => async (dispatch, getState) => {\n  try {\n    console.log(userDetails);\n    let response = await fetch(baseUrl + \"users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userDetails)\n    });\n    console.log(response);\n\n    if (response.ok) {\n      response = await response.json();\n      var interests = \"\";\n\n      for (var i = 0; i < response.user.interests.length; i++) {\n        interests += response.user.interests[i].interest;\n        interests += \"*\";\n      }\n\n      localStorage.setItem(\"isSignedIn\", true);\n      localStorage.setItem(\"userId\", response.user._id);\n      localStorage.setItem(\"interests\", interests); //localStorage.setItem(\"interests\", JSON.stringify(response.user.interests));\n      //localStorage.setItem(\"interests\", response.user.interests);\n\n      localStorage.setItem(\"token\", response.token);\n      dispatch({\n        type: ActionTypes.SIGN_UP,\n        payload: response\n      });\n    } else {\n      response = await response.text();\n      console.log(\"Eror\", response);\n      throw new Error(response);\n    }\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.AUTH_FAILED,\n      payload: {\n        error: err\n      }\n    });\n  }\n}; // Add authorization header in request and modify the logout\n\nexport const logOut = userToken => async (dispatch, getState) => {\n  try {\n    let bearer_token = \"Bearer \" + userToken.token;\n    let response = await fetch(baseUrl + \"users/logout\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: bearer_token\n      }\n    });\n\n    if (response.ok) {\n      response = await response.text();\n      localStorage.removeItem(\"isSignedIn\");\n      localStorage.removeItem(\"userId\");\n      localStorage.removeItem(\"interests\");\n      localStorage.removeItem(\"token\");\n      dispatch({\n        type: ActionTypes.SIGN_OUT,\n        payload: response\n      });\n    } else {\n      response = await response.text();\n      throw new Error(response);\n    }\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.SIGN_OUT,\n      payload: {\n        error: err\n      }\n    });\n  }\n};\nexport const ChangeSpaces = data => async (dispatch, getState) => {\n  const {\n    token,\n    spaceId,\n    interests,\n    userId,\n    type\n  } = data;\n\n  try {\n    let bearer_token = \"Bearer \" + token;\n    let response = await fetch(baseUrl + \"follow/space\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: bearer_token\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (response.ok) {\n      response = await response.text();\n      var interestslocal = localStorage.getItem(\"interests\");\n      var interests_;\n\n      var _interests;\n\n      if (type == 'follow') {\n        interests_ = interestslocal + spaceId + '*';\n        localStorage.setItem(\"interests\", interests_);\n        _interests = interests_.split('*');\n\n        _interests.pop();\n      } else {\n        interests_ = interestslocal.replace(spaceId, '');\n        localStorage.setItem(\"interests\", interests_);\n        _interests = interests_.split('*');\n\n        _interests.pop();\n      }\n\n      dispatch(fetchFollowSpaces(_interests));\n      dispatch(fetchHomeFeed(_interests));\n      dispatch(fetchBlogs(_interests));\n      dispatch(fetchAnswers());\n      dispatch(fetchReactions());\n      dispatch(fetchBReactions());\n      dispatch(fetchAReactions());\n      dispatch(fetchComments());\n      dispatch(fetchBComments());\n      dispatch(fetchBlogDemands());\n      dispatch(fetchUser(userId)); //dispatch(fetchUser(userId));\n      // dispatch({ type: ActionTypes.SPACE_FOLLOW, payload: response });\n    } else {\n      response = await response.text();\n      throw new Error(response);\n    }\n  } catch (err) {\n    dispatch(postFail(err.message)); // dispatch({ type: ActionTypes.SIGN_OUT, payload: { error: err } });\n  }\n};","map":{"version":3,"sources":["/home/jaskaran/Desktop/poogle/Poogle/src/redux/actions/auth.js"],"names":["ActionTypes","fetchFollowSpaces","fetchHomeFeed","fetchUser","fetchBlogs","fetchReactions","fetchAnswers","fetchAReactions","fetchComments","fetchBReactions","fetchBComments","fetchBlogDemands","postFail","baseUrl","signIn","userDetails","dispatch","getState","response","fetch","method","headers","body","JSON","stringify","ok","json","interests","i","user","length","interest","localStorage","setItem","_id","token","type","SIGN_IN","payload","text","Error","err","AUTH_FAILED","error","signUp","console","log","SIGN_UP","logOut","userToken","bearer_token","Authorization","removeItem","SIGN_OUT","ChangeSpaces","data","spaceId","userId","interestslocal","getItem","interests_","_interests","split","pop","replace","message"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"../ActionTypes\";\nimport {fetchFollowSpaces, fetchHomeFeed, fetchUser, fetchBlogs,fetchReactions, fetchAnswers\n\t, fetchAReactions, fetchComments, fetchBReactions,\n\tfetchBComments, fetchBlogDemands,  postFail} from '../ActionCreators'\nimport { baseUrl } from \"../../shared/baseUrl\";\n\n\n//--------------------------AUTHENTICATION-----------------------------------/\n\nexport const signIn = (userDetails) => async (dispatch, getState) => {\n\ttry {\n\t\tlet response = await fetch(baseUrl + \"users/login\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\tbody: JSON.stringify(userDetails),\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tresponse = await response.json();\n\n\t\t\tvar interests = \"\";\n\t\t\tfor(var i=0;i<response.user.interests.length;i++){\n\t\t\t\tinterests += response.user.interests[i].interest;\n\t\t\t\tinterests += \"*\";\n\t\t\t}\n\n\t\t\tlocalStorage.setItem(\"isSignedIn\", true);\n\t\t\tlocalStorage.setItem(\"userId\", response.user._id);\n\t\t\tlocalStorage.setItem(\"interests\", interests);\n\t\t\tlocalStorage.setItem(\"token\", response.token);\n\t\t\tdispatch({ type: ActionTypes.SIGN_IN, payload: response });\n\t\t} else {\n\t\t\tresponse = await response.text();\n\t\t\tthrow new Error(response);\n\t\t}\n\t} catch (err) {\n\t\tdispatch({ type: ActionTypes.AUTH_FAILED, payload: { error: err } });\n\t}\n};\n\nexport const signUp = (userDetails) => async (dispatch, getState) => {\n\ttry {\n\t\tconsole.log(userDetails);\n\t\tlet response = await fetch(baseUrl + \"users\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\tbody: JSON.stringify(userDetails),\n\t\t});\n\t\tconsole.log(response);\n\n\t\tif (response.ok) {\n\t\t\tresponse = await response.json();\n\t\t\tvar interests = \"\";\n\t\t\tfor(var i=0;i<response.user.interests.length;i++){\n\t\t\t\tinterests += response.user.interests[i].interest;\n\t\t\t\tinterests += \"*\";\n\t\t\t}\n\n\t\t\tlocalStorage.setItem(\"isSignedIn\", true);\n\t\t\tlocalStorage.setItem(\"userId\", response.user._id);\n\t\t\tlocalStorage.setItem(\"interests\", interests);\n\t\t\t//localStorage.setItem(\"interests\", JSON.stringify(response.user.interests));\n\t\t\t//localStorage.setItem(\"interests\", response.user.interests);\n\t\t\tlocalStorage.setItem(\"token\", response.token);\n\t\t\tdispatch({ type: ActionTypes.SIGN_UP, payload: response });\n\t\t} else {\n\t\t\tresponse = await response.text();\n\t\t\tconsole.log(\"Eror\", response);\n\t\t\tthrow new Error(response);\n\t\t}\n\t} catch (err) {\n\t\tdispatch({ type: ActionTypes.AUTH_FAILED, payload: { error: err } });\n\t}\n};\n\n// Add authorization header in request and modify the logout\nexport const logOut = (userToken) => async (dispatch, getState) => {\n\ttry {\n\t\tlet bearer_token = \"Bearer \" + userToken.token;\n\t\tlet response = await fetch(baseUrl + \"users/logout\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: bearer_token,\n\t\t\t},\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tresponse = await response.text();\n\t\t\tlocalStorage.removeItem(\"isSignedIn\");\n\t\t\tlocalStorage.removeItem(\"userId\");\n\t\t\tlocalStorage.removeItem(\"interests\");\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\tdispatch({ type: ActionTypes.SIGN_OUT, payload: response });\n\t\t} else {\n\t\t\tresponse = await response.text();\n\t\t\tthrow new Error(response);\n\t\t}\n\t} catch (err) {\n\t\tdispatch({ type: ActionTypes.SIGN_OUT, payload: { error: err } });\n\t}\n};\n\nexport const ChangeSpaces = (data) => async (dispatch, getState)=>{\n\tconst {token, spaceId, interests, userId, type} = data;\n    try {\n\t\tlet bearer_token = \"Bearer \" + token;\n\t\tlet response = await fetch(baseUrl + \"follow/space\", {\n\t\t\tmethod: \"PATCH\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: bearer_token,\n\t\t\t},\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tresponse = await response.text();\n\n\t\t\tvar interestslocal = localStorage.getItem(\"interests\"); \n\n\t\t\tvar interests_;\n\t\t\tvar _interests;\n\t\t\tif(type == 'follow'){\n\t\t\t\tinterests_ = interestslocal+spaceId+'*';\n\t\t\t\tlocalStorage.setItem(\"interests\", interests_);\n\t\n\t\t\t\t_interests = interests_.split('*');\n\t\t\t\t_interests.pop();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tinterests_ = interestslocal.replace(spaceId, '');\n\t\t\t\tlocalStorage.setItem(\"interests\", interests_);\n\n\t\t\t\t_interests = interests_.split('*');\n\t\t\t\t_interests.pop();\n\t\t\t}\n\n\t\t\tdispatch(fetchFollowSpaces(_interests));\n\t\t\tdispatch(fetchHomeFeed(_interests));\n\t\t\tdispatch(fetchBlogs(_interests));\n\t\t\tdispatch(fetchAnswers());\n\t\t\tdispatch(fetchReactions());\n\t\t\tdispatch(fetchBReactions());\n\t\t\tdispatch(fetchAReactions());\n\t\t\tdispatch(fetchComments());\n\t\t\tdispatch(fetchBComments());\n\t\t\tdispatch(fetchBlogDemands());\n\t\t\tdispatch(fetchUser(userId));\n\n\t\t\t//dispatch(fetchUser(userId));\n\n\t\t\t// dispatch({ type: ActionTypes.SPACE_FOLLOW, payload: response });\n\t\t} else {\n\t\t\tresponse = await response.text();\n\t\t\tthrow new Error(response);\n\t\t}\n\t} catch (err) {\n\t\tdispatch(postFail(err.message));\n\t\t// dispatch({ type: ActionTypes.SIGN_OUT, payload: { error: err } });\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}