{"ast":null,"code":"import * as ActionTypes from \"../ActionTypes\";\nimport { baseUrl } from \"../../shared/baseUrl\";\n\nconst axios = require(\"axios\");\n\nexport const fetchUser = userId => async (dispatch, getState) => {\n  console.log(\"Got fet user request for userId\" + userId);\n\n  try {\n    let response = await fetch(baseUrl + \"users/\" + userId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.ok) {\n      response = await response.json();\n      dispatch({\n        type: ActionTypes.GET_USER,\n        payload: response\n      });\n    } else {\n      response = await response.text();\n      console.log(\"Error\", response);\n      throw new Error(response);\n    }\n  } catch (err) {\n    console.log(\"err\", err);\n    dispatch({\n      type: ActionTypes.USER_FAILED,\n      payload: err\n    });\n  }\n};\nexport const updateUser = data => async (dispatch, getState) => {\n  let formData = new FormData();\n  const {\n    token,\n    image,\n    graduation_year,\n    field,\n    description,\n    email,\n    Uname,\n    password\n  } = data;\n  let bearer_token = \"Bearer \" + token;\n  formData.append('image', image);\n  formData.append('name', Uname);\n  formData.append('email', email);\n  formData.append('description', description);\n  formData.append('password', password);\n  formData.append('graduation_year', graduation_year);\n  formData.append('field', field);\n\n  try {\n    let response = await axios.patch(baseUrl + \"users/me/update\", formData, {\n      headers: {\n        \"Authorization\": bearer_token,\n        \"Content-type\": \"multipart/form-data\"\n      }\n    });\n    console.log(response.data);\n    dispatch({\n      type: ActionTypes.UPDATE_USER,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.UPDATE_FAILED,\n      payload: err\n    });\n  }\n};","map":{"version":3,"sources":["/home/jaskaran/Desktop/poogle/Poogle/src/redux/actions/user.js"],"names":["ActionTypes","baseUrl","axios","require","fetchUser","userId","dispatch","getState","console","log","response","fetch","method","headers","ok","json","type","GET_USER","payload","text","Error","err","USER_FAILED","updateUser","data","formData","FormData","token","image","graduation_year","field","description","email","Uname","password","bearer_token","append","patch","UPDATE_USER","UPDATE_FAILED"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"../ActionTypes\";\nimport { baseUrl } from \"../../shared/baseUrl\";\nconst axios = require(\"axios\");\n\nexport const fetchUser = (userId) => async (dispatch, getState) => {\n\tconsole.log(\"Got fet user request for userId\"+ userId);\n\ttry {\n\t\tlet response = await fetch(baseUrl + \"users/\"+userId, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t});\n\n\t\tif (response.ok) {\n\t\t\tresponse = await response.json();\n\t\t\tdispatch({ type: ActionTypes.GET_USER, payload: response });\n\t\t} else {\n\t\t\tresponse = await response.text();\n\t\t\tconsole.log(\"Error\", response);\n\t\t\tthrow new Error(response);\n\t\t}\n\t} catch (err) {\n\t\tconsole.log(\"err\", err);\n\t\tdispatch({ type: ActionTypes.USER_FAILED, payload: err });\n\t}\n};\n\nexport const updateUser = (data) => async(dispatch, getState)=>{\n    let formData = new FormData();\n    const {token, image, graduation_year, field, description, email, Uname, password} = data;\n    let bearer_token = \"Bearer \" + token;\n    formData.append('image', image);\n    formData.append('name', Uname);\n    formData.append('email', email);\n    formData.append('description', description);\n    formData.append('password', password);\n    formData.append('graduation_year', graduation_year);\n    formData.append('field', field);\n    try{\n        let response= await axios.patch(\n            baseUrl + \"users/me/update\",\n            formData, {\n                headers:{\n                    \"Authorization\":bearer_token,\n                    \"Content-type\":\"multipart/form-data\"\n                }\n            }\n        )\n        console.log(response.data);\n        dispatch({ type: ActionTypes.UPDATE_USER, payload: response.data });\n\n    }catch (err){\n        dispatch({ type: ActionTypes.UPDATE_FAILED, payload: err });\n    }  \n}\n\n"]},"metadata":{},"sourceType":"module"}