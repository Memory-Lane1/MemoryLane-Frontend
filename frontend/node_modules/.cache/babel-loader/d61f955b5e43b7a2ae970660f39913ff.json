{"ast":null,"code":"import * as ActionTypes from \"../ActionTypes\";\nexport const Blogs = (state = {\n  isLoading: true,\n  errMess: null,\n  blogs: [],\n  postFail: false,\n  postFailMess: ''\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BLOGS:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        blogs: action.payload,\n        postFail: false,\n        postFailMess: ''\n      };\n\n    case ActionTypes.BLOGS_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload,\n        postFail: false,\n        postFailMess: ''\n      };\n\n    case ActionTypes.BLOGS_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        blogs: [],\n        postFail: false,\n        postFailMess: ''\n      };\n\n    case ActionTypes.ADD_BLOG:\n      var blog = action.payload;\n      return { ...state,\n        blogs: state.blogs.concat(blog),\n        postFail: false,\n        postFailMess: ''\n      };\n\n    case ActionTypes.POST_FAIL:\n      return { ...state,\n        postFail: true,\n        postFailMess: action.payload\n      };\n\n    case ActionTypes.DELETE_BLOG:\n      var blogId = action.payload;\n      var index = state.blogs.indexOf(state.blogs.filter(blog => blog._id === blogId)[0]);\n      state.blogs.splice(index, 1);\n      return { ...state,\n        blogs: state.blogs\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Blogs;\nexport const userBlogs = (state = {\n  isLoading: true,\n  errMess: null,\n  blogs: []\n}, action) => {\n  switch (action.type) {\n    case ActionTypes.GET_USER_BLOGS:\n      return { ...state,\n        isLoading: false,\n        errMess: null,\n        blogs: action.payload\n      };\n\n    case ActionTypes.USER_BLOGS_LOADING:\n      return { ...state,\n        isLoading: true,\n        errMess: null,\n        blogs: []\n      };\n\n    case ActionTypes.USER_BLOGS_FAILED:\n      return { ...state,\n        isLoading: false,\n        errMess: action.payload.err,\n        blogs: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"sources":["/home/jaskaran/Desktop/Poogle/src/redux/reducers/blogs.js"],"names":["ActionTypes","Blogs","state","isLoading","errMess","blogs","postFail","postFailMess","action","type","ADD_BLOGS","payload","BLOGS_FAILED","BLOGS_LOADING","ADD_BLOG","blog","concat","POST_FAIL","DELETE_BLOG","blogId","index","indexOf","filter","_id","splice","userBlogs","GET_USER_BLOGS","USER_BLOGS_LOADING","USER_BLOGS_FAILED","err"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"../ActionTypes\";\n\nexport const Blogs = (\n\tstate = { isLoading: true, errMess: null, blogs: [], postFail: false, postFailMess: '' },\n\taction\n) => {\n\tswitch (action.type) {\n\t\tcase ActionTypes.ADD_BLOGS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\terrMess: null,\n\t\t\t\tblogs: action.payload,\n\t\t\t\tpostFail: false, postFailMess: ''\n\t\t\t};\n\n\t\tcase ActionTypes.BLOGS_FAILED:\n\t\t\treturn { ...state, isLoading: false, errMess: action.payload, postFail: false, postFailMess: '' };\n\n\t\tcase ActionTypes.BLOGS_LOADING:\n\t\t\treturn { ...state, isLoading: true, errMess: null, blogs: [], postFail: false, postFailMess: '' };\n\n\t\tcase ActionTypes.ADD_BLOG:\n\t\t\t\tvar blog = action.payload;\n\t\t\t\treturn { ...state, blogs: state.blogs.concat(blog), postFail: false, postFailMess: ''};\t\n\t\t\t\n\t\tcase ActionTypes.POST_FAIL:\n\t\t\treturn { ...state, postFail: true, postFailMess: action.payload}\n\t\t\n\t\tcase ActionTypes.DELETE_BLOG: \n\t\t\t\tvar blogId = action.payload;\n\t\t\t\tvar index = state.blogs.indexOf(state.blogs.filter(blog => blog._id === blogId)[0]);\n\t\t\t\tstate.blogs.splice(index, 1);\n\t\t\t\treturn {...state, blogs: state.blogs}\n\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport const userBlogs = (state={isLoading: true, errMess: null, blogs: []}, action)=>{\n\tswitch(action.type){\n\t\tcase ActionTypes.GET_USER_BLOGS:\n\t\t\treturn {...state, isLoading:false, errMess:null, blogs:action.payload}\n\t\tcase ActionTypes.USER_BLOGS_LOADING:\n\t\t\treturn {...state, isLoading:true, errMess:null, blogs:[]}\n\t\tcase ActionTypes.USER_BLOGS_FAILED:\n\t\t\treturn {...state, isLoading:false, errMess:action.payload.err, blogs:[]}\n\t\tdefault:\n\t\t\treturn state;\n\n\t}\n\n};"]},"metadata":{},"sourceType":"module"}